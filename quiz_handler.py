import json

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from aiogram import F

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, types
from random import sample

from questions import QUESTIONS, ANIMALS

router = Router()


class Quiz(StatesGroup):
    quest = State()
    feedback = State()
    text_to_stuff = State()

    quiz_result = State()
    questions = State()


amphibian_list = [x['answers'][0] for x in QUESTIONS]
reptile_list = [x['answers'][1] for x in QUESTIONS]
mammal_list = [x['answers'][2] for x in QUESTIONS]
bird_list = [x['answers'][3] for x in QUESTIONS]
check_list = amphibian_list + reptile_list + mammal_list + bird_list
check_list.append('–ù–∞—á–∞—Ç—å')


@router.message(Quiz.quest)
async def make_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    quiz_result, questions = data['quiz_result'], data['questions']

    if message.text not in check_list:
        await message.answer(f'–ù–µ –ø–æ–Ω–∏–º–∞—é üôà\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ—Ç–≤–µ—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏ "–ù–∞—á–∞—Ç—å"')
        return


    if message.text in amphibian_list:
        quiz_result['amphibian'] += 1
    elif message.text in reptile_list:
        quiz_result['reptile'] += 1
    elif message.text in mammal_list:
        quiz_result['mammal'] += 1
    elif message.text in bird_list:
        quiz_result['bird'] += 1
    await state.update_data({'quiz_result': quiz_result})


    if not questions:
        await state.clear()
        win_category = max(quiz_result, key=quiz_result.get)
        for category, animals in ANIMALS.items():
            if category == win_category:
                win_animal = sample(animals, 1)[0]

                result_message = f'ü´ß –í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º —ç—Ç–æ–≥–æ –º–∏–ª–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —á–∞—Å—Ç—å—é –±–æ–ª—å—à–æ–≥–æ –∫—Ä—É–≥–∞ –¥—Ä—É–∑–µ–π –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞\n' \
                                 f'üêæ –í–∞—à –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–æ–¥–æ–ø–µ—á–Ω—ã–π: <a href="{win_animal["url"]}">{win_animal["name"]}</a> üêæ \n\n' \
                                 f'ü´ß –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫—É–Ω—Å—Ç–≤–∞: ' \
                                 f'<a href="https://moscowzoo.ru/about/guardianship">¬´–ö–ª—É–± –¥—Ä—É–∑–µ–π –∑–æ–æ–ø–∞—Ä–∫–∞¬ª</a>'

                await state.set_data({'result_name': win_animal['name']})
                kb = [
                        [InlineKeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?', callback_data='replay')],
                        [InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ó–æ–æ–ø–∞—Ä–∫–∞', callback_data='contact')],
                        [InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ VK', callback_data='replay',
                                              url=f'https://vk.com/share.php?url={win_animal["url"]}'
                                                  f'&title=@totem_zoo_bot\n–¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {win_animal["name"]}'
                                                  f'&image={win_animal["photo"]}',)],
                        [InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data='feedback')]
                ]
                inlinekb = InlineKeyboardMarkup(inline_keyboard=kb)

                await message.answer(f'–£—Ä–∞! –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞! \n'
                                     f'–¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ: {win_animal["name"]}',
                                     reply_markup=types.ReplyKeyboardRemove())
                await message.answer_photo(photo=win_animal['photo'])

                await message.answer(result_message, parse_mode='HTML', reply_markup=inlinekb)

                return

    question = sample(questions, 1)[0]
    questions.pop(questions.index(question))
    variants = question['answers']
    await state.update_data({'questions': questions})

    builder = ReplyKeyboardBuilder()
    for _ in variants:
        builder.add(types.KeyboardButton(text=_))
    builder.adjust(2)

    await message.answer(f"{question['question']}", reply_markup=builder.as_markup(resize_keyboard=True))


@router.callback_query(F.data == 'replay')
async def replay(callback: types.CallbackQuery, state: FSMContext):
    await state.set_data(
        {'quiz_result': {
            'amphibian': 0,
            'reptile': 0,
            'mammal': 0,
            'bird': 0},
            'questions': QUESTIONS.copy()
        }
    )

    await state.set_state(Quiz.quest.state)
    kb = [[types.KeyboardButton(text='–ù–∞—á–∞—Ç—å')]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await callback.message.answer(f'–ù–∞—á–Ω—ë–º?', reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == 'contact')
async def contact(callback: types.CallbackQuery, state: FSMContext):
    result_name = await state.get_data()
    buttons = [[types.KeyboardButton(text=f'ü¶â –ß–∞—Ç —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º ü¶â\n '
                                          f'–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: \n{result_name["result_name"]}')]]
    kb = types.ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )
    await callback.message.answer(f'–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫—É–Ω—Å—Ç–≤–∞, '
                                  f'–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ì–ª–µ–±–æ–º: \n\n'
                                  f'‚úè   Telegram: @—Ö—Ö—Ö\n'
                                  f'‚úâ   E-mail: —Ö—Ö—Ö@—Ö—Ö.—Ö—Ö\n'
                                  f'üìû   +7-9—Ö—Ö-—Ö—Ö—Ö-—Ö—Ö-—Ö—Ö', reply_markup=kb)
    await state.set_state(Quiz.text_to_stuff.state)
    await callback.answer()


@router.message(Quiz.text_to_stuff) #–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å chat_id —á–∞—Ç–∞ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
async def text_to_stuff(message: types.Message, state: FSMContext):
    await message.copy_to(chat_id='—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö', reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


@router.callback_query(F.data == 'feedback')
async def feedback_state(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Quiz.feedback.state)
    await callback.message.answer(
        f'ü´ß –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ –Ω–∞—à–µ–º –±–æ—Ç–µ –∏–ª–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—é. \n\n'
        f'–ê –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ —É–¥–æ–±–Ω–µ–µ –¥–ª—è –í–∞—Å üêª‚Äç‚ùÑ')
    await callback.answer()


@router.message(Quiz.feedback)
async def feedback_add(message: types.Message, state: FSMContext):
    with open('feedbacks.json', 'r', encoding='utf8') as fb_file:
        fb = json.load(fb_file)
        with open('feedbacks.json', 'w', encoding='utf8') as new_fb_file:
            new = {
                'feedback': message.text,
                'user': message.from_user.username
            }
            fb.append(new)
            new_data = json.dumps(fb, indent=4, ensure_ascii=False)
            new_fb_file.write(new_data)

    await message.answer(f'–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤! ü¶â')
    await state.clear()
